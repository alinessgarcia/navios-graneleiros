-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.alerts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  alert_type text NOT NULL,
  title text NOT NULL,
  message text NOT NULL,
  severity text DEFAULT 'medium'::text CHECK (severity = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text, 'critical'::text])),
  commodity_name text,
  port_code text,
  vessel_imo text,
  opportunity_value numeric,
  is_read boolean DEFAULT false,
  triggered_at timestamp with time zone DEFAULT now(),
  expires_at timestamp with time zone,
  metadata jsonb,
  CONSTRAINT alerts_pkey PRIMARY KEY (id),
  CONSTRAINT alerts_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.berth_occupancy (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  port_code text NOT NULL,
  port_name text NOT NULL,
  berth_code text NOT NULL,
  berth_name text NOT NULL,
  berth_length_meters numeric,
  berth_depth_meters numeric,
  berth_capacity_tons numeric,
  current_vessel_imo text,
  current_vessel_name text,
  occupation_start timestamp with time zone,
  estimated_departure timestamp with time zone,
  operation_type text,
  cargo_type text,
  loading_rate_tons_hour numeric,
  completion_percentage numeric DEFAULT 0,
  status text DEFAULT 'available'::text,
  equipment_available jsonb,
  source text NOT NULL,
  collected_at timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT berth_occupancy_pkey PRIMARY KEY (id)
);
CREATE TABLE public.cargo_manifests (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  vessel_imo text NOT NULL,
  vessel_name text NOT NULL,
  port_code text NOT NULL,
  operation_date date NOT NULL,
  commodity_code text,
  commodity_name text NOT NULL,
  commodity_ncm text,
  quantity_tons numeric NOT NULL,
  unit_value_usd numeric,
  total_value_usd numeric,
  shipper_name text,
  shipper_country text,
  shipper_city text,
  consignee_name text,
  consignee_document text,
  origin_country text,
  origin_state text,
  origin_city text,
  destination_country text,
  destination_state text,
  destination_city text,
  bl_number text,
  container_numbers ARRAY,
  freight_rate_usd numeric,
  freight_basis text,
  incoterm text,
  source text NOT NULL,
  collected_at timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT cargo_manifests_pkey PRIMARY KEY (id)
);
CREATE TABLE public.data_collection_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  source_id uuid,
  collection_start timestamp with time zone DEFAULT now(),
  collection_end timestamp with time zone,
  status text DEFAULT 'running'::text,
  records_collected integer DEFAULT 0,
  error_message text,
  execution_time_seconds numeric,
  data_quality_score numeric,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT data_collection_logs_pkey PRIMARY KEY (id),
  CONSTRAINT data_collection_logs_source_id_fkey FOREIGN KEY (source_id) REFERENCES public.government_data_sources(id)
);
CREATE TABLE public.freight_rates (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  origin_port text NOT NULL,
  destination_port text NOT NULL,
  commodity_type text NOT NULL,
  rate_usd_ton numeric NOT NULL,
  rate_currency text DEFAULT 'USD'::text,
  rate_basis text,
  vessel_size_category text,
  rate_date date NOT NULL,
  rate_validity_start date,
  rate_validity_end date,
  market_conditions text,
  bunker_adjustment numeric DEFAULT 0,
  source text NOT NULL,
  broker_name text,
  is_spot_rate boolean DEFAULT true,
  collected_at timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT freight_rates_pkey PRIMARY KEY (id)
);
CREATE TABLE public.government_data_sources (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  source_name text NOT NULL,
  source_url text NOT NULL,
  source_type text NOT NULL,
  data_category text NOT NULL,
  last_successful_collection timestamp with time zone,
  last_attempt timestamp with time zone,
  status text DEFAULT 'active'::text,
  error_count integer DEFAULT 0,
  success_count integer DEFAULT 0,
  collection_frequency_hours integer DEFAULT 6,
  authentication_required boolean DEFAULT false,
  authentication_config jsonb,
  parsing_config jsonb,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT government_data_sources_pkey PRIMARY KEY (id)
);
CREATE TABLE public.line_ups (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  vessel_imo text NOT NULL,
  vessel_name text NOT NULL,
  port_code text NOT NULL,
  port_name text NOT NULL,
  berth_code text,
  berth_name text,
  eta timestamp with time zone,
  etd timestamp with time zone,
  status text DEFAULT 'programmed'::text,
  operation_type text,
  cargo_type text,
  quantity_tons numeric,
  priority integer DEFAULT 0,
  source text NOT NULL,
  collected_at timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT line_ups_pkey PRIMARY KEY (id)
);
CREATE TABLE public.market_data (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  commodity_name text NOT NULL,
  price_usd numeric NOT NULL,
  price_date date NOT NULL,
  exchange text,
  unit text DEFAULT 'ton'::text,
  volume_traded numeric,
  source text NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT market_data_pkey PRIMARY KEY (id)
);
CREATE TABLE public.news_sources (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL,
  url text NOT NULL,
  rss_feed text,
  is_active boolean DEFAULT true,
  last_updated timestamp with time zone,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT news_sources_pkey PRIMARY KEY (id)
);
CREATE TABLE public.port_metrics (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  port_code text NOT NULL,
  port_name text NOT NULL,
  metric_date date NOT NULL,
  vessels_waiting integer DEFAULT 0,
  vessels_operating integer DEFAULT 0,
  average_wait_hours numeric DEFAULT 0,
  total_throughput_tons numeric DEFAULT 0,
  congestion_level text DEFAULT 'low'::text CHECK (congestion_level = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text, 'critical'::text])),
  weather_impact jsonb,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT port_metrics_pkey PRIMARY KEY (id)
);
CREATE TABLE public.port_operations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  operation_date date NOT NULL,
  port_code text NOT NULL,
  port_name text NOT NULL,
  vessel_imo text,
  commodity_type text NOT NULL,
  commodity_name text NOT NULL,
  quantity_tons numeric NOT NULL,
  unit_type text DEFAULT 'tons'::text,
  operation_type text CHECK (operation_type = ANY (ARRAY['import'::text, 'export'::text, 'cabotage'::text])),
  terminal text,
  berth text,
  shipper text,
  consignee text,
  value_usd numeric,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  origin_country text,
  origin_state text,
  origin_city text,
  consignee_document text,
  berth_code text,
  estimated_days_docked numeric,
  actual_days_docked numeric,
  loading_rate_tons_hour numeric,
  weather_delay_hours numeric,
  source_reliability_score numeric DEFAULT 1.0,
  data_source text DEFAULT 'manual'::text,
  CONSTRAINT port_operations_pkey PRIMARY KEY (id)
);
CREATE TABLE public.port_schedules (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  port_code text NOT NULL,
  port_name text NOT NULL,
  schedule_date date NOT NULL,
  shift text,
  berth_code text,
  berth_name text,
  berth_capacity_tons numeric,
  scheduled_vessels integer DEFAULT 0,
  expected_throughput_tons numeric,
  actual_throughput_tons numeric,
  weather_conditions jsonb,
  operational_restrictions text,
  efficiency_percentage numeric,
  congestion_level text DEFAULT 'low'::text,
  average_waiting_hours numeric DEFAULT 0,
  source text NOT NULL,
  collected_at timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT port_schedules_pkey PRIMARY KEY (id)
);
CREATE TABLE public.predictions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  model_name text NOT NULL,
  commodity_name text NOT NULL,
  prediction_type text NOT NULL,
  predicted_value numeric NOT NULL,
  confidence_score numeric CHECK (confidence_score >= 0::numeric AND confidence_score <= 1::numeric),
  prediction_date date NOT NULL,
  target_date date NOT NULL,
  input_data jsonb,
  created_at timestamp with time zone DEFAULT now(),
  user_id uuid,
  CONSTRAINT predictions_pkey PRIMARY KEY (id),
  CONSTRAINT predictions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.price_alerts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  commodity_name text NOT NULL,
  trigger_price numeric NOT NULL,
  alert_type text NOT NULL CHECK (alert_type = ANY (ARRAY['above'::text, 'below'::text])),
  is_triggered boolean DEFAULT false,
  message text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  triggered_at timestamp with time zone,
  CONSTRAINT price_alerts_pkey PRIMARY KEY (id),
  CONSTRAINT price_alerts_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.profiles (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL UNIQUE,
  display_name text,
  company text,
  phone text,
  preferences jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT profiles_pkey PRIMARY KEY (id),
  CONSTRAINT profiles_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.vessels (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  imo text NOT NULL UNIQUE,
  name text NOT NULL,
  flag text,
  dwt integer,
  vessel_type text,
  current_position jsonb,
  eta timestamp with time zone,
  status text DEFAULT 'active'::text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  last_known_position jsonb,
  cargo_capacity_tons numeric,
  year_built integer,
  owner_company text,
  operator_company text,
  classification_society text,
  main_engine_power integer,
  service_speed_knots numeric,
  data_source text DEFAULT 'manual'::text,
  CONSTRAINT vessels_pkey PRIMARY KEY (id)
);
CREATE TABLE public.watchlist (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  commodity_name text NOT NULL,
  target_price numeric,
  alert_above boolean DEFAULT false,
  alert_below boolean DEFAULT false,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT watchlist_pkey PRIMARY KEY (id),
  CONSTRAINT watchlist_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
